import os
import pickle 
import pandas as pd 
from sklearn.feature_extraction.text import CountVectorizer



#read in data from .pkl file --> sql db once tested sufficiently
#filepath = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop') + "\\parsed_branded.pkl"
filepath_mac = os.path.expanduser("~/Desktop/") + "/parsed_branded.pkl"

with open(filepath_mac, 'rb') as f:
    df = pickle.load(f)

subset = df['ingred_list'].iloc[:500]
    
ingredient_lists = subset.apply(lambda x: [i.replace(" ", "zazazaza") for i in x]).apply(lambda x: " ".join(x))
    
    
def get_ingredient_counts(series, range_ngram, min_freq):
    """Takes a Series object, ngram_tuple, and min_freq then returns counts of all nested elements for all combos in ngram-range that appear at least min_freq times"""
    
    """
    series: Should be s pd.Series that only contains lists/sets of all ingredients 
    ngram_tup: Tuple that specifies range of ngrams to generate
    min_freg: integer that specifies minimum count threshold for elements of vectors generated by CountVectorizer
    """
    
    
    #perform count vectorizer on ingredients
    cv = CountVectorizer(min_df = min_freq, ngram_range = range_ngram)
    series_transformed = cv.fit_transform(series)
    
    #get all features names from cv object
    ingredient_names = pd.Series(cv.get_feature_names_out())
    ingredients = ingredient_names.copy().apply(lambda x: x.replace("zazazaza", " ")).tolist()
    
    
    ingredient_counts = series_transformed.sum(axis = 0).T.tolist()
    
    
    
    return list(zip(ingredients, ingredient_counts))



print(get_ingredient_counts(ingredient_lists, range_ngram=(1,3), min_freq = 3))